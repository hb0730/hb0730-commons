<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.org/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="LineLength">
        <property name="max" value="3000"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="^.*System\.(out|err).*$"/>
        <property name="message" value="Don't use System.out/err, use SLF4J instead."/>
    </module>

    <module name="TreeWalker">
        <property name="tabWidth" value="4"/>
        <module name="CommentsIndentation"/>
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CS:OFF:BEGIN"/>
            <property name="onCommentFormat" value="CS:OFF:END"/>
            <property name="checkFormat" value=".*"/>
        </module>
        <!-- 没用的import检查，-->
        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>

        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>
        <!-- 检查是否有过度复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>
        <module name="OneStatementPerLine"/>
        <module name="UnnecessaryParentheses"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 -->
        <module name="SimplifyBooleanReturn"/>
        <module name="DefaultComesLast"/>
        <!--检查producerGroup switch语句中的默认值是否在所有cases之后-->
        <module name="DefaultComesLast"/>
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>
        <!-- 检查long型定义是否有大写的“L” -->
        <module name="UpperEll"/>
        <!-- 常量名的检查（只允许大写） -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)|(^logger)"/>
        </module>
        <!-- 局部的非final型的变量，包括catch中的参数的检查 -->
        <module name="LocalVariableName"/>
        <!-- 局部的final变量，包括catch中的参数的检查 -->
        <module name="LocalFinalVariableName"/>
        <!-- 非static型变量的检查 -->
        <module name="MemberName"/>
        <!--验证类类型参数的标识符-->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <!--验证方法类型参数的标识符-->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^com\.hb0730\.commons(\.[a-zA-Z][a-zA-Z0-9]*)+$"/>
        </module>
        <!-- 方法的参数名 -->
        <module name="ParameterName"/>
        <!-- 仅仅是static型的变量（不包括static final型）的检查 -->
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <!-- Class或Interface名检查，默认^[A-Z][a-zA-Z0-9]*$-->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]*$)|(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <!--whitespace-->
        <module name="GenericWhitespace"/>
        <module name="NoWhitespaceBefore"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
        </module>
        <!-- Indentation -->
        <module name="Indentation">
            <property name="forceStrictCondition" value="true"/>
            <property name="throwsIndent" value="8"/>
            <property name="lineWrappingIndentation" value="8"/>
        </module>

        <module name="MethodParamPad"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>

    </module>
</module>
